name: asyncio
on: [ push ]
jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt install -y libc++abi-18-dev libc++-18-dev
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Build and test
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug-asan
          configurePresetAdditionalArgs: "['-DVCPKG_TARGET_TRIPLET=x64-linux-dynamic']"
          buildPreset: debug-asan
          testPreset: debug-asan
        env:
          CC: clang-18
          CXX: clang++-18
          CXXFLAGS: -stdlib=libc++
          # https://github.com/llvm/llvm-project/issues/59432
          ASAN_OPTIONS: alloc_dealloc_mismatch=0

  # `REQUIRE(co_await expr)` unexpectedly repeats execution in GCC, so skip unit testing for now.
  linux-static:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install musl toolchains
        run: curl -fsSL https://github.com/Hackerl/musl-cross-make/releases/download/gcc-14.2.0/x86_64-linux-musl-native-gcc14.2.0.tar.gz | tar -xz -C /opt
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug
          configurePresetAdditionalArgs: "['-DCMAKE_EXE_LINKER_FLAGS=-static-pie']"
          buildPreset: debug
        env:
          CC: /opt/x86_64-linux-musl-native-gcc14.2.0/bin/x86_64-linux-musl-gcc
          CXX: /opt/x86_64-linux-musl-native-gcc14.2.0/bin/x86_64-linux-musl-g++

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Create custom triplet
        # https://github.com/microsoft/vcpkg/issues/29132
        run: |
          Set-Content x64-windows-static-sanitizer.cmake @"
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_CRT_LINKAGE static)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_C_FLAGS "-fsanitize=address")
          set(VCPKG_CXX_FLAGS "-fsanitize=address")
          "@
      - name: Build and test
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug-asan
          configurePresetAdditionalArgs: "[String.raw`-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}`, '-DVCPKG_TARGET_TRIPLET=x64-windows-static-sanitizer', '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebug']"
          buildPreset: debug-asan
          testPreset: debug-asan

  windows-32:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Create custom triplet
        # https://github.com/microsoft/vcpkg/issues/29132
        run: |
          Set-Content x86-windows-static-sanitizer.cmake @"
          set(VCPKG_TARGET_ARCHITECTURE x86)
          set(VCPKG_CRT_LINKAGE static)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_C_FLAGS "-fsanitize=address")
          set(VCPKG_CXX_FLAGS "-fsanitize=address")
          "@
      - name: Build and test
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug-asan
          configurePresetAdditionalArgs: "['-A Win32', String.raw`-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}`, '-DVCPKG_TARGET_TRIPLET=x86-windows-static-sanitizer', '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebug']"
          buildPreset: debug-asan
          testPreset: debug-asan
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

  macos:
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install LLVM
        run: |
          brew install llvm@19
          echo "LLVM_HOME=$(brew --prefix llvm@19)" >> $GITHUB_ENV
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Build and test
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug-asan
          configurePresetAdditionalArgs: "['-DVCPKG_TARGET_TRIPLET=x64-osx-dynamic']"
          buildPreset: debug-asan
          testPreset: debug-asan
        env:
          CC: ${{ env.LLVM_HOME }}/bin/clang
          CXX: ${{ env.LLVM_HOME }}/bin/clang++
          LDFLAGS: -L${{ env.LLVM_HOME }}/lib/c++ -L${{ env.LLVM_HOME }}/lib -L${{ env.LLVM_HOME }}/lib/unwind -lunwind -Wl,-rpath,${{ env.LLVM_HOME }}/lib/c++ -Wl,-rpath,${{ env.LLVM_HOME }}/lib -Wl,-rpath,${{ env.LLVM_HOME }}/lib/unwind

  android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api: [ 28, 34 ]
        platform:
          - abi: arm64-v8a
            triplet: arm64-android
          - abi: armeabi-v7a
            triplet: arm-neon-android
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Create custom triplet
        run: |
          cp "${VCPKG_ROOT}/triplets/${{ matrix.platform.triplet }}.cmake" android-${{ matrix.api }}.cmake
          echo "set(VCPKG_CMAKE_SYSTEM_VERSION ${{ matrix.api }})" >> android-${{ matrix.api }}.cmake
      - name: Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: debug-asan
          configurePresetAdditionalArgs: "['-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake', String.raw`-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}`, '-DVCPKG_TARGET_TRIPLET=android-${{ matrix.api }}', '-DANDROID_ABI=${{ matrix.platform.abi }}', '-DANDROID_PLATFORM=android-${{ matrix.api }}', '-DCMAKE_CATCH_DISCOVER_TESTS_DISCOVERY_MODE=PRE_TEST']"
          buildPreset: debug-asan
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
